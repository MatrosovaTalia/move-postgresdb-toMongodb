import psycopg2 as pg
import pymongo
from bson.objectid import ObjectId
import datetime

# To connect to database change:
# dbname, user, password to your postgres database name, user and password
conn = pg.connect(dbname='dvdrental', user='postgres',
                  password='docker', host='localhost')
cursor = conn.cursor()

# Change db_name to your mongodb database name
db_name = "dvdrental"
client = pymongo.MongoClient('localhost', 27017)
db = client[db_name]

# drop exisitng data to avoid dublicates
db.actors.drop()
db.customers.drop()
db.films.drop()
db.film_actors.drop()
db.payments.drop()
db.rentals.drop()
db.store_staff.drop()


# Add country, address, city combined tables
# _id is customer_id from joined tables country, address and city
cursor.execute("SELECT * FROM customer c INNER JOIN (address a "
               "INNER JOIN (country co INNER JOIN city ct "
               "USING (country_id)) co_ct USING(city_id)) full_address "
               "USING (address_id);")

for column in cursor.fetchall():
    customer = {"_id": column[1], "address_id": column[0], "store_id": column[2],
              "first_name": column[3], "last_name": column[4], 
              "email": column[5], "activebool": column[6],
              "create_date": datetime.datetime.combine(column[7], datetime.time.min),
              "customer_last_update": column[8],
              "active": column[9], "city_id": column[10], "address": column[11], 
              "address2": column[12], "district": column[13], 
              "postal_code": column[14], "phone": column[15], 
              "address_last_update": column[16], "country_id": column[17],
              "country": column[18], "country_last_update": column[19],
               "city": column[20], "city_last_update": column[21]
              }
    db.customers.insert_one(customer)
print("customers added")


# Add joined rental, film_category, category and inventory tables
# "_id" is "rental_id"
cursor.execute("SELECT * FROM ((film_category c INNER JOIN inventory i "
               "USING (film_id)) f_c INNER JOIN rental USING (inventory_id)) "
               "inventory_films INNER JOIN category USING (category_id);")

for column in cursor.fetchall():
    rental = {"_id": column[6], "category_id": column[0], 
              "inventory_id": column[1], "film_id": column[2],
              "film_category_last_update": column[3], "store_id": column[4],
              "inventory_last_update": column[5], "rental_date": column[7], 
              "customer_id": column[8], "return_date": column[9], 
              "staff_id": column[10], "rental_last_update": column[11],
              "category": column[12], "category_last_update": column[13]             
              }
    db.rentals.insert_one(rental)
print("rentals added")


# Add joined film and language tables (joined usinf language_id)
# The column "name" in language table replaced by "language" lable in mongo 
# documents. "_id" is "film_id"
cursor.execute("SELECT * FROM film c INNER JOIN language l "
               "USING (language_id);")


for column in cursor.fetchall():
    film = {"_id": column[1], "title": column[2], "description":column[3],
              "release_year": column[4], "renatl_duration": column[5], 
              "rental_rate": float(column[6]), "length": column[7], 
              "replacement_cost": float(column[8]), "rating": column[9], 
              "film_last_update": column[10], "special_features": column[11],
              "fulltext": column[12], "language_id": column[0],
              "language": column[13], "language_last_update": column[14]
              }
    db.films.insert_one(film)
print("films added")


# Add actors table, "_id" is "actor_id"
cursor.execute("SELECT * FROM actor;")

for column in cursor.fetchall():
    actor = {"_id": column[0], "first_name": column[1], 
              "last_name": column[2], "actor_last_update": column[3]
              }
    db.actors.insert_one(actor)
print("actors added")

# Add film_actor table, "_id" is object id generated by mongodb
# Since in postgres the key was composite

cursor.execute("SELECT * FROM film_actor;")

for column in cursor.fetchall():
    film_actor = {"actor_id": column[0], "film_id": column[1], 
              "last_update": column[2]}
    db.film_actors.insert_one(film_actor)

print("film actor added")

cursor.execute("SELECT * FROM payment;")

for column in cursor.fetchall():
    payment = {"_id": column[0], "customer_id": column[1], 
              "staff_id": column[2], "rental_id": column[3], 
              "amount": float(column[4]), "payment_date": column[5]
              }
    db.payments.insert_one(payment)

print("payments added")

cursor.execute("SELECT * FROM staff INNER JOIN store USING (store_id);")
for column in cursor.fetchall():
    staff = {"_id": column[0], "staff_id": column[1], "first_name": column[2],
              "last_name": column[3], "address_id": column[4],
              "email": column[5], "active": column[6], "username": column[7],
              "password": column[8], "staff_last_update": column[9], 
              "picture": str(column[10]), "manager_staf_id": column[11],
              "address_id": column[12], "store_last_update": column[13]
              }
    db.store_staff.insert_one(staff)

print("store_staff added")